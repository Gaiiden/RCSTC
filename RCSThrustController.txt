declare parameter thrust.

// currently these are only hard-coded values. Change as needed
set thrusterCount to 4. // # of thrusters capable of forward thrust
set kN to 0.97.         // use RCS Build Aid to get accurate kN for your individual thrusters
set isp to 270.         // available via right-click menu on thrusters

// no touchy!
set e to 2.7182.
set thrustLength to 0.
set bNodeExist to false.
set lineUpdate to 3.

clearscreen.
print "RCS Thrust Control Initializing...".

// if a maneuver node is there, keep checking to ensure it's still there
when bNodeExist then
{
  if nextnode:eta = tempNode:eta
  {
    set bNodeExist to false.
  }.
  preserve.
}.

// trigger to begin burn
when nextnode:eta - (thrustLength/2) <= 0 then
{
  print "T". // we need this so the next command will be on a new line
  print "Commencing thrust".
  rcs on.
  set ship:control:fore to thrust.
  set thrustBeginTime to time:seconds.
}.

// trigger to monitor the burn
when rcs then
{
  if time:seconds - thrustBeginTime >= thrustLength
  {
    print "Thrust Complete!".
    rcs off.
    remove nextnode.
  }.
  preserve.
}.

// ensure that a node exists for us to use
// code courtesy of Lilleman (kOS thread post #1364)
set iNodeETA to (time:seconds + 126144000).
set tempNode to node(iNodeETA,0,0,0).
add tempNode.
if nextnode:eta < tempNode:eta
{
  // all is well, carry on
  set bNodeExist to true.

  print round(nextnode:deltav:mag,2) + "m/s dV manuever node detected...".

  // ensure we have enough dV to carry out the maneuver fully, warn user if not
  list resources in shipRes.
  for res in shipRes { if res:name = "monopropellant" { set monoMass to res:amount. }. }.
  set dV to isp*9.82*ln(ship:mass/(ship:mass-(monoMass*.004))).
  if dV < nextnode:deltav:mag
  {
    print "WARNING! Craft only contains " + round(dV,2) + "m/s dV!".
    set warningFlashTime to time:seconds.
    until time:seconds - warningFlashTime > 5
    {
      print "WARNING!" at (0,2).
      wait 0.5.
      print "        " at (0,2).
      wait 0.5.
    }.
    print "WARNING!" at (0,2).
    set lineUpdate to 4.
  }.

  // compute the time needed for the thrust
  set thrustLength to (ship:mass * 9.81 * isp / (thrust*(thrusterCount*kN))) * (1 - (e^((nextnode:deltav:mag*-1)/(9.81 * isp)))).
  print round(thrustLength,2) + "s of thrust required".

  // wait for the triggers to carry out the maneuver and provide a countdown timer
  lock timeRemaining to (time + nextnode:eta - (thrustLength/2)) - time.
  until bNodeExist = false
  {
    if timeRemaining >= 0
    {
      print "                                             " at (0,lineUpdate).
      print "Time remaining until thrust: " + timeRemaining:Clock at (0,lineUpdate).
    }.

    wait 0.001.
  }.
}
else
{
  print "No manuever node detected".
}.

// clean up
set ship:control:fore to 0.
set ship:control:neutralize to true.
rcs off.
remove tempNode.
print " ". // forces the program end message down a line
